name: Python CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint-test-security:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache virtualenv
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-${{ matrix.python-version }}-

      - name: Setup virtual environment and install dependencies
        run: |
          python -m venv .venv
          .venv/bin/pip install --upgrade pip
          .venv/bin/pip install -r requirements.txt
          .venv/bin/pip install pip-audit bandit mypy

      - name: Sort headers using isort
        run: .venv/bin/isort $(git ls-files '*.py')

      - name: Format code using black
        run: .venv/bin/black $(git ls-files '*.py')

      - name: Lint with pylint
        run: .venv/bin/pylint --errors-only $(git ls-files '*.py') | tee pylint.log

      - name: Type check using mypy
        run: .venv/bin/mypy app

      - name: Run pip-audit (dependency vulnerabilities)
        run: .venv/bin/pip-audit --json

      - name: Run Bandit (static security analysis)
        run: .venv/bin/bandit -r app/ -ll -v

      - name: Run tests with pytest and coverage
        run: .venv/bin/pytest -v --cov=app --cov-fail-under=80 --cov-report=term-missing --cov-report=xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

      - name: Upload pytest logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-logs-${{ matrix.python-version }}
          path: pytest.log
          overwrite: true